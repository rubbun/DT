package lionsclub.com.directoryapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CLUB.
*/
public class ClubDao extends AbstractDao<Club, Long> {

    public static final String TABLENAME = "CLUB";
    private DaoSession daoSession;
    ;
    private Query<Club> district_ClubsQuery;

    public ClubDao(DaoConfig config) {
        super(config);
    }

    public ClubDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CLUB' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CLUB_ID' TEXT," + // 1: clubId
                "'NAME' TEXT," + // 2: name
                "'MEMCOUNT' INTEGER," + // 3: memcount
                "'DIST_ID' TEXT NOT NULL );"); // 4: distId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CLUB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Club entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String clubId = entity.getClubId();
        if (clubId != null) {
            stmt.bindString(2, clubId);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        Integer memcount = entity.getMemcount();
        if (memcount != null) {
            stmt.bindLong(4, memcount);
        }
        stmt.bindString(5, entity.getDistId());
    }

    @Override
    protected void attachEntity(Club entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Club readEntity(Cursor cursor, int offset) {
        Club entity = new Club( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // clubId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // memcount
            cursor.getString(offset + 4) // distId
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Club entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClubId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMemcount(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDistId(cursor.getString(offset + 4));
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Club entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Club entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /** Internal query to resolve the "Clubs" to-many relationship of District. */
    public List<Club> _queryDistrict_Clubs(String distId) {
        synchronized (this) {
            if (district_ClubsQuery == null) {
                QueryBuilder<Club> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DistId.eq(null));
                district_ClubsQuery = queryBuilder.build();
            }
        }
        Query<Club> query = district_ClubsQuery.forCurrentThread();
        query.setParameter(0, distId);
        return query.list();
    }

    /**
     * Properties of entity Club.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ClubId = new Property(1, String.class, "clubId", false, "CLUB_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Memcount = new Property(3, Integer.class, "memcount", false, "MEMCOUNT");
        public final static Property DistId = new Property(4, String.class, "distId", false, "DIST_ID");
    }

}
