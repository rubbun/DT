package lionsclub.com.directoryapp;

import java.util.List;
import lionsclub.com.directoryapp.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CLUB.
 */
public class Club {

    private Long id;
    private String clubId;
    private String name;
    private Integer memcount;
    /** Not-null value. */
    private String distId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ClubDao myDao;

    private List<Member> memberList;

    public Club() {
    }

    public Club(Long id) {
        this.id = id;
    }

    public Club(Long id, String clubId, String name, Integer memcount, String distId) {
        this.id = id;
        this.clubId = clubId;
        this.name = name;
        this.memcount = memcount;
        this.distId = distId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getClubDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getClubId() {
        return clubId;
    }

    public void setClubId(String clubId) {
        this.clubId = clubId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getMemcount() {
        return memcount;
    }

    public void setMemcount(Integer memcount) {
        this.memcount = memcount;
    }

    /** Not-null value. */
    public String getDistId() {
        return distId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDistId(String distId) {
        this.distId = distId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Member> getMemberList() {
        if (memberList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MemberDao targetDao = daoSession.getMemberDao();
            List<Member> memberListNew = targetDao._queryClub_MemberList(clubId
            );
            synchronized (this) {
                if(memberList == null) {
                    memberList = memberListNew;
                }
            }
        }
        return memberList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMemberList() {
        memberList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
