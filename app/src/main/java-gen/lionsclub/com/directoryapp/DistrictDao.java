package lionsclub.com.directoryapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import lionsclub.com.directoryapp.District;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DISTRICT.
*/
public class DistrictDao extends AbstractDao<District, Long> {

    public static final String TABLENAME = "DISTRICT";
    private DaoSession daoSession;
    ;

    public DistrictDao(DaoConfig config) {
        super(config);
    }


    public DistrictDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DISTRICT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DIST_ID' TEXT," + // 1: distId
                "'DIST_NAME' TEXT);"); // 2: distName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DISTRICT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, District entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String distId = entity.getDistId();
        if (distId != null) {
            stmt.bindString(2, distId);
        }

        String distName = entity.getDistName();
        if (distName != null) {
            stmt.bindString(3, distName);
        }
    }

    @Override
    protected void attachEntity(District entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public District readEntity(Cursor cursor, int offset) {
        District entity = new District( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // distId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // distName
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, District entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDistId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDistName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(District entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(District entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity District.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DistId = new Property(1, String.class, "distId", false, "DIST_ID");
        public final static Property DistName = new Property(2, String.class, "distName", false, "DIST_NAME");
    }

}
