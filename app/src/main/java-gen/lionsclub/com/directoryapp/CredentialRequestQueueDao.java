package lionsclub.com.directoryapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import lionsclub.com.directoryapp.CredentialRequestQueue;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CREDENTIAL_REQUEST_QUEUE.
 */
public class CredentialRequestQueueDao extends AbstractDao<CredentialRequestQueue, Void> {

    public static final String TABLENAME = "CREDENTIAL_REQUEST_QUEUE";

    public CredentialRequestQueueDao(DaoConfig config) {
        super(config);
    }

    ;


    public CredentialRequestQueueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'CREDENTIAL_REQUEST_QUEUE' (" + //
                "'DATE_TIME_REQUESTED' TEXT," + // 0: dateTimeRequested
                "'IS_PROCESSED' INTEGER," + // 1: isProcessed
                "'DATE_TIME_PROCESSED' TEXT," + // 2: dateTimeProcessed
                "'MEM_INT' INTEGER NOT NULL );"); // 3: memInt
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CREDENTIAL_REQUEST_QUEUE'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, CredentialRequestQueue entity) {
        stmt.clearBindings();

        String dateTimeRequested = entity.getDateTimeRequested();
        if (dateTimeRequested != null) {
            stmt.bindString(1, dateTimeRequested);
        }

        Boolean isProcessed = entity.getIsProcessed();
        if (isProcessed != null) {
            stmt.bindLong(2, isProcessed ? 1l : 0l);
        }

        String dateTimeProcessed = entity.getDateTimeProcessed();
        if (dateTimeProcessed != null) {
            stmt.bindString(3, dateTimeProcessed);
        }
        stmt.bindLong(4, entity.getMemInt());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public CredentialRequestQueue readEntity(Cursor cursor, int offset) {
        CredentialRequestQueue entity = new CredentialRequestQueue(//
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // dateTimeRequested
                cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // isProcessed
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dateTimeProcessed
                cursor.getInt(offset + 3) // memInt
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, CredentialRequestQueue entity, int offset) {
        entity.setDateTimeRequested(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsProcessed(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setDateTimeProcessed(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMemInt(cursor.getInt(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(CredentialRequestQueue entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(CredentialRequestQueue entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity CredentialRequestQueue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DateTimeRequested = new Property(0, String.class, "dateTimeRequested", false, "DATE_TIME_REQUESTED");
        public final static Property IsProcessed = new Property(1, Boolean.class, "isProcessed", false, "IS_PROCESSED");
        public final static Property DateTimeProcessed = new Property(2, String.class, "dateTimeProcessed", false, "DATE_TIME_PROCESSED");
        public final static Property MemInt = new Property(3, long.class, "memInt", false, "MEM_INT");
    }

}
