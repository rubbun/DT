package app.WebService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 4/15/2015 10:32:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class xClub implements KvmSerializable {

    public String iD;
    public String name;
    public int mems;
    public VectorMember membersIn;
    public String l;
    public String c;
    public String h;
    public String e;
    public String s;
    public String y;
    public String m;
    public String t;

    public xClub() {
    }

    public xClub(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("ID")) {
            Object obj = soapObject.getProperty("ID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                iD = j.toString();
            } else if (obj != null && obj instanceof String) {
                iD = (String) obj;
            }
        }
        if (soapObject.hasProperty("Name")) {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                name = j.toString();
            } else if (obj != null && obj instanceof String) {
                name = (String) obj;
            }
        }
        if (soapObject.hasProperty("Mems")) {
            Object obj = soapObject.getProperty("Mems");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                mems = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                mems = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("MembersIn")) {
            SoapObject j = (SoapObject) soapObject.getProperty("MembersIn");
            membersIn = new VectorMember(j);
        }
        if (soapObject.hasProperty("l")) {
            Object obj = soapObject.getProperty("l");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                l = j.toString();
            } else if (obj != null && obj instanceof String) {
                l = (String) obj;
            }
        }
        if (soapObject.hasProperty("c")) {
            Object obj = soapObject.getProperty("c");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                c = j.toString();
            } else if (obj != null && obj instanceof String) {
                c = (String) obj;
            }
        }
        if (soapObject.hasProperty("h")) {
            Object obj = soapObject.getProperty("h");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                h = j.toString();
            } else if (obj != null && obj instanceof String) {
                h = (String) obj;
            }
        }
        if (soapObject.hasProperty("e")) {
            Object obj = soapObject.getProperty("e");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                e = j.toString();
            } else if (obj != null && obj instanceof String) {
                e = (String) obj;
            }
        }
        if (soapObject.hasProperty("s")) {
            Object obj = soapObject.getProperty("s");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                s = j.toString();
            } else if (obj != null && obj instanceof String) {
                s = (String) obj;
            }
        }
        if (soapObject.hasProperty("y")) {
            Object obj = soapObject.getProperty("y");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                y = j.toString();
            } else if (obj != null && obj instanceof String) {
                y = (String) obj;
            }
        }
        if (soapObject.hasProperty("m")) {
            Object obj = soapObject.getProperty("m");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                m = j.toString();
            } else if (obj != null && obj instanceof String) {
                m = (String) obj;
            }
        }
        if (soapObject.hasProperty("t")) {
            Object obj = soapObject.getProperty("t");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                t = j.toString();
            } else if (obj != null && obj instanceof String) {
                t = (String) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return iD;
            case 1:
                return name;
            case 2:
                return mems;
            case 3:
                return membersIn;
            case 4:
                return l;
            case 5:
                return c;
            case 6:
                return h;
            case 7:
                return e;
            case 8:
                return s;
            case 9:
                return y;
            case 10:
                return m;
            case 11:
                return t;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 12;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ID";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Mems";
                break;
            case 3:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "MembersIn";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "l";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "c";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "h";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "e";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "s";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "y";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "m";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "t";
                break;
        }
    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
