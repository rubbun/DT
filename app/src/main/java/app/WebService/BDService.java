package app.WebService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 4/15/2015 10:32:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import android.os.AsyncTask;
import org.ksoap2.serialization.MarshalFloat;

public class BDService {

    public String NAMESPACE = "http://tempuri.org/";
    public String url = "http://alphatest.in/Services/BDService.asmx";
    public int timeOut = 60000;
    public IWsdl2CodeEvents eventHandler;
    public WS_Enums.SoapProtocolVersion soapVersion;

    public BDService() {
    }

    public BDService(IWsdl2CodeEvents eventHandler) {
        this.eventHandler = eventHandler;
    }

    public BDService(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url;
    }

    public BDService(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }

    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void AUAsync(String user, String password) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AUAsync(user, password, null);
    }

    public void AUAsync(final String user, final String password, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Boolean doInBackground(Void... params) {
                return AU(user, password, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("AU", result);
                }
            }
        }.execute();
    }

    public boolean AU(String user, String password) {
        return AU(user, password, null);
    }

    public boolean AU(String user, String password, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "AU");
        soapReq.addProperty("user", user);
        soapReq.addProperty("password", password);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/AU", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/AU", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void MYBRAsync(String u1, String u2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        MYBRAsync(u1, u2, null);
    }

    public void MYBRAsync(final String u1, final String u2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return MYBR(u1, u2, headers);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("MYBR", result);
                }
            }
        }.execute();
    }

    public int MYBR(String u1, String u2) {
        return MYBR(u1, u2, null);
    }

    public int MYBR(String u1, String u2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "MYBR");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/MYBR", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/MYBR", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void GBRSAsync(String u1, String u2, VectorString alrdhv, String cTG) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GBRSAsync(u1, u2, alrdhv, cTG, null);
    }

    public void GBRSAsync(final String u1, final String u2, final VectorString alrdhv, final String cTG, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return GBRS(u1, u2, alrdhv, cTG, headers);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GBRS", result);
                }
            }
        }.execute();
    }

    public int GBRS(String u1, String u2, VectorString alrdhv, String cTG) {
        return GBRS(u1, u2, alrdhv, cTG, null);
    }

    public int GBRS(String u1, String u2, VectorString alrdhv, String cTG, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GBRS");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("alrdhv", alrdhv);
        soapReq.addProperty("CTG", cTG);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GBRS", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GBRS", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void GBRS_LUAsync(String u1, String u2, VectorString alrdhv) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GBRS_LUAsync(u1, u2, alrdhv, null);
    }

    public void GBRS_LUAsync(final String u1, final String u2, final VectorString alrdhv, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GBRS_LU(u1, u2, alrdhv, headers);
            }
            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GBRS_LU", result);
                }
            }
        }.execute();
    }

    public String GBRS_LU(String u1, String u2, VectorString alrdhv) {
        return GBRS_LU(u1, u2, alrdhv, null);
    }

    public String GBRS_LU(String u1, String u2, VectorString alrdhv, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GBRS_LU");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("alrdhv", alrdhv);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GBRS_LU", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GBRS_LU", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void BCtsAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        BCtsAsync(null);
    }

    public void BCtsAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorString>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected VectorString doInBackground(Void... params) {
                return BCts(headers);
            }
            @Override
            protected void onPostExecute(VectorString result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("BCts", result);
                }
            }
        }.execute();
    }

    public VectorString BCts() {
        return BCts(null);
    }

    public VectorString BCts(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "BCts");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/BCts", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/BCts", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorString resultVariable = new VectorString(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void VLDRFAsync(String u1, String u2, String memIdOnUpdate, MemberProfile profile) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        VLDRFAsync(u1, u2, memIdOnUpdate, profile, null);
    }

    public void VLDRFAsync(final String u1, final String u2, final String memIdOnUpdate, final MemberProfile profile, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected String doInBackground(Void... params) {
                return VLDRF(u1, u2, memIdOnUpdate, profile, headers);
            }
            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("VLDRF", result);
                }
            }
        }.execute();
    }

    public String VLDRF(String u1, String u2, String memIdOnUpdate, MemberProfile profile) {
        return VLDRF(u1, u2, memIdOnUpdate, profile, null);
    }

    public String VLDRF(String u1, String u2, String memIdOnUpdate, MemberProfile profile, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "VLDRF");
        soapEnvelope.addMapping("http://tempuri.org/", "profile", new MemberProfile().getClass());
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("BitValue",true);
        soapReq.addProperty("memIdOnUpdate", memIdOnUpdate);
        soapReq.addProperty("profile", profile);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/VLDRF", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/VLDRF", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                System.out.println("if");
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                System.out.println("else");
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error!!!");
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void CLrAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CLrAsync(null);
    }

    public void CLrAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Void>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Void doInBackground(Void... params) {
                CLr(headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("CLr", result);
                }
            }
        }.execute();
    }

    public void CLr() {
        CLr(null);
    }

    public void CLr(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "CLr");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/CLr", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/CLr", soapEnvelope);
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }

    public void RDAsync(String s) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        RDAsync(s, null);
    }

    public void RDAsync(final String s, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorString>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected VectorString doInBackground(Void... params) {
                return RD(s, headers);
            }
            @Override
            protected void onPostExecute(VectorString result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("RD", result);
                }
            }
        }.execute();
    }

    public VectorString RD(String s) {
        return RD(s, null);
    }

    public VectorString RD(String s, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "RD");
        soapReq.addProperty("s", s);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/RD", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/RD", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorString resultVariable = new VectorString(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void StAsync(String cn) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        StAsync(cn, null);
    }

    public void StAsync(final String cn, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorString>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected VectorString doInBackground(Void... params) {
                return St(cn, headers);
            }
            @Override
            protected void onPostExecute(VectorString result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("St", result);
                }
            }
        }.execute();
    }

    public VectorString St(String cn) {
        return St(cn, null);
    }

    public VectorString St(String cn, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "St");
        soapReq.addProperty("Cn", cn);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/St", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/St", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorString resultVariable = new VectorString(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void CountrAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CountrAsync(null);
    }

    public void CountrAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorString>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected VectorString doInBackground(Void... params) {
                return Countr(headers);
            }
            @Override
            protected void onPostExecute(VectorString result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("Countr", result);
                }
            }
        }.execute();
    }

    public VectorString Countr() {
        return Countr(null);
    }

    public VectorString Countr(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "Countr");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/Countr", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/Countr", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorString resultVariable = new VectorString(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void IDEAsync(String id) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        IDEAsync(id, null);
    }

    public void IDEAsync(final String id, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return IDE(id, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("IDE", result);
                }
            }
        }.execute();
    }

    public boolean IDE(String id) {
        return IDE(id, null);
    }

    public boolean IDE(String id, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "IDE");
        soapReq.addProperty("Id", id);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/IDE", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/IDE", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void RCAsync(String c) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        RCAsync(c, null);
    }

    public void RCAsync(final String c, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Void>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Void doInBackground(Void... params) {
                RC(c, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("RC", result);
                }
            }
        }.execute();
    }

    public void RC(String c) {
        RC(c, null);
    }

    public void RC(String c, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "RC");
        soapReq.addProperty("c", c);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/RC", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/RC", soapEnvelope);
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }

/*    public void GCPAsync(String i) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GCPAsync(i, null);
    }

    public void GCPAsync(final String i, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return GCP(i, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GCP", result);
                }
            }
        }.execute();
    }*/

    public String  GCP(String i) {
        return GCP(i, null);
    }

    public String GCP(String i, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GCP");
        soapReq.addProperty("i", i);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GCP", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GCP", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    Object obj1 = result.getProperty(1);
                    Object obj2 = result.getProperty(2);
                    String st = obj1.toString();
                    //SoapObject j = (SoapObject) obj;
                   // GCPResponse resultVariable = new GCPResponse(j);
                    return obj+"~"+obj1+"~"+obj2;


                    /*if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }*/
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

   /* public void BNRAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        BNRAsync(null);
    }

    public void BNRAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorString>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected VectorString doInBackground(Void... params) {
                return BNR(headers);
            }
            @Override
            protected void onPostExecute(VectorString result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("BNR", result);
                }
            }
        }.execute();
    }*/

    public VectorBannerInfo BNR(String u1,String u2){
        return BNR(u1, u2, null);
    }

    public VectorBannerInfo BNR(String u1,String u2,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","BNR");
        soapReq.addProperty("u1",u1);
        soapReq.addProperty("u2",u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/BNR", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/BNR", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorBannerInfo resultVariable = new VectorBannerInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void LINGM_MDAsync(String u1, String u2, String club) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        LINGM_MDAsync(u1, u2, club, null);
    }

    public void LINGM_MDAsync(final String u1, final String u2, final String club, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected String doInBackground(Void... params) {
                return LINGM_MD(u1, u2, club, headers);
            }
            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("LINGM_MD", result);
                }
            }
        }.execute();
    }

    public String LINGM_MD(String u1, String u2, String club) {
        return LINGM_MD(u1, u2, club, null);
    }

    public String LINGM_MD(String u1, String u2, String club, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "LINGM_MD");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("Club", club);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/LINGM_MD", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/LINGM_MD", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void URATTAsync(String data, String u1, String u2, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        URATTAsync(data, u1, u2, recordID, null);
    }

    public void URATTAsync(final String data, final String u1, final String u2, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Boolean doInBackground(Void... params) {
                return URATT(data, u1, u2, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("URATT", result);
                }
            }
        }.execute();
    }

    public boolean URATT(String data, String u1, String u2, String recordID) {
        return URATT(data, u1, u2, recordID, null);
    }

    public boolean URATT(String data, String u1, String u2, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "URATT");
        soapReq.addProperty("data", data);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/URATT", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/URATT", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void URHTTAsync(String data, String u1, String u2, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        URHTTAsync(data, u1, u2, recordID, null);
    }

    public void URHTTAsync(final String data, final String u1, final String u2, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Boolean doInBackground(Void... params) {
                return URHTT(data, u1, u2, recordID, headers);
            }

            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("URHTT", result);
                }
            }
        }.execute();
    }

    public boolean URHTT(String data, String u1, String u2, String recordID) {
        return URHTT(data, u1, u2, recordID, null);
    }

    public boolean URHTT(String data, String u1, String u2, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "URHTT");
        soapReq.addProperty("data", data);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/URHTT", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/URHTT", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void URLGAsync(VectorByte image, String u1, String u2, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        URLGAsync(image, u1, u2, recordID, null);
    }

    public void URLGAsync(final VectorByte image, final String u1, final String u2, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Boolean doInBackground(Void... params) {
                return URLG(image, u1, u2, recordID, headers);
            }

            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("URLG", result);
                }
            }
        }.execute();
    }

    public boolean URLG(VectorByte image, String u1, String u2, String recordID) {
        return URLG(image, u1, u2, recordID, null);
    }

    public boolean URLG(VectorByte image, String u1, String u2, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "URLG");
        soapReq.addProperty("image", image.toString());
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/URLG", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/URLG", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void URETGAsync(String title, String u1, String u2, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        URETGAsync(title, u1, u2, recordID, null);
    }

    public void URETGAsync(final String title, final String u1, final String u2, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Boolean doInBackground(Void... params) {
                return URETG(title, u1, u2, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("URETG", result);
                }
            }
        }.execute();
    }

    public boolean URETG(String title, String u1, String u2, String recordID) {
        return URETG(title, u1, u2, recordID, null);
    }

    public boolean URETG(String title, String u1, String u2, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "URETG");
        soapReq.addProperty("Title", title);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/URETG", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/URETG", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void URECatAsync(String title, String u1, String u2, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        URECatAsync(title, u1, u2, recordID, null);
    }

    public void URECatAsync(final String title, final String u1, final String u2, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return URECat(title, u1, u2, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("URECat", result);
                }
            }
        }.execute();
    }

    public boolean URECat(String title, String u1, String u2, String recordID) {
        return URECat(title, u1, u2, recordID, null);
    }

    public boolean URECat(String title, String u1, String u2, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "URECat");
        soapReq.addProperty("Title", title);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/URECat", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/URECat", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void URTAsync(String title, String u1, String u2, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        URTAsync(title, u1, u2, recordID, null);
    }

    public void URTAsync(final String title, final String u1, final String u2, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return URT(title, u1, u2, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("URT", result);
                }
            }
        }.execute();
    }

    public boolean URT(String title, String u1, String u2, String recordID) {
        return URT(title, u1, u2, recordID, null);
    }

    public boolean URT(String title, String u1, String u2, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "URT");
        soapReq.addProperty("Title", title);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/URT", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/URT", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void RVGalAsync(boolean lgdScr, String record, String u1, String u2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        RVGalAsync(lgdScr, record, u1, u2, null);
    }

    public void RVGalAsync(final boolean lgdScr, final String record, final String u1, final String u2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorGalPic>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected VectorGalPic doInBackground(Void... params) {
                return RVGal(lgdScr, record, u1, u2, headers);
            }
            @Override
            protected void onPostExecute(VectorGalPic result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("RVGal", result);
                }
            }
        }.execute();
    }

    public VectorGalPic RVGal(boolean lgdScr, String record, String u1, String u2) {
        return RVGal(lgdScr, record, u1, u2, null);
    }

    public VectorGalPic RVGal(boolean lgdScr, String record, String u1, String u2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "RVGal");
        soapReq.addProperty("LgdScr", lgdScr);
        soapReq.addProperty("Record", record);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/RVGal", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/RVGal", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorGalPic resultVariable = new VectorGalPic(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void RPGalAsync(boolean lgdScr, String record, String u1, String u2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        RPGalAsync(lgdScr, record, u1, u2, null);
    }

    public void RPGalAsync(final boolean lgdScr, final String record, final String u1, final String u2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorGalPic>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected VectorGalPic doInBackground(Void... params) {
                return RPGal(lgdScr, record, u1, u2, headers);
            }
            @Override
            protected void onPostExecute(VectorGalPic result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("RPGal", result);
                }
            }
        }.execute();
    }

    public VectorGalPic RPGal(boolean lgdScr, String record, String u1, String u2) {
        return RPGal(lgdScr, record, u1, u2, null);
    }

    public VectorGalPic RPGal(boolean lgdScr, String record, String u1, String u2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "RPGal");
        soapReq.addProperty("LgdScr", lgdScr);
        soapReq.addProperty("Record", record);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/RPGal", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/RPGal", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorGalPic resultVariable = new VectorGalPic(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void BRHLPAsync(String record, String u1, String u2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        BRHLPAsync(record, u1, u2, null);
    }

    public void BRHLPAsync(final String record, final String u1, final String u2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorByte>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected VectorByte doInBackground(Void... params) {
                return BRHLP(record, u1, u2, headers);
            }
            @Override
            protected void onPostExecute(VectorByte result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("BRHLP", result);
                }
            }
        }.execute();
    }

    public VectorByte BRHLP(String record, String u1, String u2) {
        return BRHLP(record, u1, u2, null);
    }

    public VectorByte BRHLP(String record, String u1, String u2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "BRHLP");
        soapReq.addProperty("Record", record);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/BRHLP", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/BRHLP", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapPrimitive j = (SoapPrimitive) obj;
                    VectorByte resultVariable = new VectorByte(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void SMToAdAsync(String recordID, String u1, String u2, String msg) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SMToAdAsync(recordID, u1, u2, msg, null);
    }

    public void SMToAdAsync(final String recordID, final String u1, final String u2, final String msg, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return SMToAd(recordID, u1, u2, msg, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SMToAd", result);
                }
            }
        }.execute();
    }

    public boolean SMToAd(String recordID, String u1, String u2, String msg) {
        return SMToAd(recordID, u1, u2, msg, null);
    }

    public boolean SMToAd(String recordID, String u1, String u2, String msg, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SMToAd");
        soapReq.addProperty("RecordID", recordID);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("Msg", msg);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SMToAd", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SMToAd", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void DLRECAsync(String recordID, String u1, String u2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DLRECAsync(recordID, u1, u2, null);
    }

    public void DLRECAsync(final String recordID, final String u1, final String u2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return DLREC(recordID, u1, u2, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DLREC", result);
                }
            }
        }.execute();
    }

    public boolean DLREC(String recordID, String u1, String u2) {
        return DLREC(recordID, u1, u2, null);
    }

    public boolean DLREC(String recordID, String u1, String u2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "DLREC");
        soapReq.addProperty("RecordID", recordID);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/DLREC", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/DLREC", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void DLBKMKAsync(boolean myScr, String recordId, String u1, String u2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DLBKMKAsync(myScr, recordId, u1, u2, null);
    }

    public void DLBKMKAsync(final boolean myScr, final String recordId, final String u1, final String u2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return DLBKMK(myScr, recordId, u1, u2, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DLBKMK", result);
                }
            }
        }.execute();
    }

    public boolean DLBKMK(boolean myScr, String recordId, String u1, String u2) {
        return DLBKMK(myScr, recordId, u1, u2, null);
    }

    public boolean DLBKMK(boolean myScr, String recordId, String u1, String u2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "DLBKMK");
        soapReq.addProperty("MyScr", myScr);
        soapReq.addProperty("RecordId", recordId);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/DLBKMK", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/DLBKMK", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void ADNBKMKAsync(boolean myScr, String recordId, String u1, String u2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ADNBKMKAsync(myScr, recordId, u1, u2, null);
    }

    public void ADNBKMKAsync(final boolean myScr, final String recordId, final String u1, final String u2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return ADNBKMK(myScr, recordId, u1, u2, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("ADNBKMK", result);
                }
            }
        }.execute();
    }

    public boolean ADNBKMK(boolean myScr, String recordId, String u1, String u2) {
        return ADNBKMK(myScr, recordId, u1, u2, null);
    }

    public boolean ADNBKMK(boolean myScr, String recordId, String u1, String u2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "ADNBKMK");
        soapReq.addProperty("MyScr", myScr);
        soapReq.addProperty("RecordId", recordId);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/ADNBKMK", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/ADNBKMK", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void CNBRAsync(String u1, String u2, NewRecord nr) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CNBRAsync(u1, u2, nr, null);
    }

    public void CNBRAsync(final String u1, final String u2, final NewRecord nr, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected String doInBackground(Void... params) {
                return CNBR(u1, u2, nr, headers);
            }
            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("CNBR", result);
                }
            }
        }.execute();
    }

    public String CNBR(String u1, String u2, NewRecord nr) {
        return CNBR(u1, u2, nr, null);
    }

    public String CNBR(String u1, String u2, NewRecord nr, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "CNBR");
        soapEnvelope.addMapping("http://tempuri.org/", "nr", new NewRecord().getClass());
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("nr", nr);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/CNBR", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/CNBR", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UUPAsync(String u1, String u2, String nPass, String captchaValue, String captchaId) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UUPAsync(u1, u2, nPass, captchaValue, captchaId, null);
    }

    public void UUPAsync(final String u1, final String u2, final String nPass, final String captchaValue, final String captchaId, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                //return UUP(u1, u2, nPass, captchaValue, captchaId, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UUP", result);
                }
            }
        }.execute();
    }

    public String UUP(String u1, String u2, String nPass, String captchaValue, String captchaId) {
        return UUP(u1, u2, nPass, captchaValue, captchaId, null);
    }

    public String UUP(String u1, String u2, String nPass, String captchaValue, String captchaId, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UUP");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("nPass", nPass);
        soapReq.addProperty("captchaValue", captchaValue);
        soapReq.addProperty("captchaId", captchaId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UUP", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UUP", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    Object obj1 = result.getProperty(1);

                    return obj.toString()+"~"+obj1.toString();
                    /*if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }*/
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

   /* public void UUNAsync(String u1, String u2, String newUserName, String captchaValue, String captchaId) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UUNAsync(u1, u2, newUserName, captchaValue, captchaId, null);
    }

    public void UUNAsync(final String u1, final String u2, final String newUserName, final String captchaValue, final String captchaId, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return UUN(u1, u2, newUserName, captchaValue, captchaId, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UUN", result);
                }
            }
        }.execute();
    }*/

    public String UUN(String u1, String u2, String newUserName, String captchaValue, String captchaId) {
        return UUN(u1, u2, newUserName, captchaValue, captchaId, null);
    }

    public String UUN(String u1, String u2, String newUserName, String captchaValue, String captchaId, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UUN");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("NewUserName", newUserName);
        soapReq.addProperty("captchaValue", captchaValue);
        soapReq.addProperty("captchaId", captchaId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UUN", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UUN", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    Object obj1 = result.getProperty(1);
                    return obj.toString()+"~"+obj1.toString();
                    /*if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }*/
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void UPPAsync(String u1, String u2, String pic) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UPPAsync(u1, u2, pic, null);
    }

    public void UPPAsync(final String u1, final String u2, final String pic, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return UPP(u1, u2, pic, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UPP", result);
                }
            }
        }.execute();
    }

    public boolean UPP(String u1, String u2, String pic) {
        return UPP(u1, u2, pic, null);
    }

    public boolean UPP(String u1, String u2, String pic, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UPP");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("Pic", pic);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UPP", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UPP", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void GPIAsync(String u1, String u2, String uID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GPIAsync(u1, u2, uID, null);
    }

    public void GPIAsync(final String u1, final String u2, final String uID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, MemberProfile>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected MemberProfile doInBackground(Void... params) {
                return GPI(u1, u2, uID, headers);
            }
            @Override
            protected void onPostExecute(MemberProfile result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GPI", result);
                }
            }
        }.execute();
    }

    public MemberProfile GPI(String u1, String u2, String uID) {
        return GPI(u1, u2, uID, null);
    }

    public MemberProfile GPI(String u1, String u2, String uID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GPI");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("UID", uID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GPI", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GPI", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    MemberProfile resultVariable = new MemberProfile(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GRecDAsync(String u1, String u2, String recId) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GRecDAsync(u1, u2, recId, null);
    }

    public void GRecDAsync(final String u1, final String u2, final String recId, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected String doInBackground(Void... params) {
                return GRecD(u1, u2, recId, headers);
            }
            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GRecD", result);
                }
            }
        }.execute();
    }

    public String GRecD(String u1, String u2, String recId) {
        return GRecD(u1, u2, recId, null);
    }

    public String GRecD(String u1, String u2, String recId, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GRecD");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecId", recId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GRecD", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GRecD", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void MYGRecDAsync(String u1, String u2, String recId) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        MYGRecDAsync(u1, u2, recId, null);
    }

    public void MYGRecDAsync(final String u1, final String u2, final String recId, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected String doInBackground(Void... params) {
                return MYGRecD(u1, u2, recId, headers);
            }
            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("MYGRecD", result);
                }
            }
        }.execute();
    }

    public String MYGRecD(String u1, String u2, String recId) {
        return MYGRecD(u1, u2, recId, null);
    }

    public String MYGRecD(String u1, String u2, String recId, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "MYGRecD");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecId", recId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/MYGRecD", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/MYGRecD", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GMHAsync(String u1, String u2, String destination, String cr) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GMHAsync(u1, u2, destination, cr, null);
    }

    public void GMHAsync(final String u1, final String u2, final String destination, final String cr, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorCMessage>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected VectorCMessage doInBackground(Void... params) {
                return GMH(u1, u2, destination, cr, headers);
            }
            @Override
            protected void onPostExecute(VectorCMessage result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GMH", result);
                }
            }
        }.execute();
    }

    public VectorCMessage GMH(String u1, String u2, String destination, String cr) {
        return GMH(u1, u2, destination, cr, null);
    }

    public VectorCMessage GMH(String u1, String u2, String destination, String cr, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GMH");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("destination", destination);
        soapReq.addProperty("cr", cr);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GMH", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GMH", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorCMessage resultVariable = new VectorCMessage(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void RFAsync(String u1, String u2, String dest) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        RFAsync(u1, u2, dest, null);
    }

    public void RFAsync(final String u1, final String u2, final String dest, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return RF(u1, u2, dest, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("RF", result);
                }
            }
        }.execute();
    }

    public boolean RF(String u1, String u2, String dest) {
        return RF(u1, u2, dest, null);
    }

    public boolean RF(String u1, String u2, String dest, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "RF");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("dest", dest);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/RF", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/RF", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void NFAsync(String u1, String u2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        NFAsync(u1, u2, null);
    }

    public void NFAsync(final String u1, final String u2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Number doInBackground(Void... params) {
                return NF(u1, u2, headers);
            }
            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("NF", result);
                }
            }
        }.execute();
    }

    public int NF(String u1, String u2) {
        return NF(u1, u2, null);
    }

    public int NF(String u1, String u2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "NF");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/NF", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/NF", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void MFAsync(String u1, String u2, String dest) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        MFAsync(u1, u2, dest, null);
    }

    public void MFAsync(final String u1, final String u2, final String dest, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return MF(u1, u2, dest, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("MF", result);
                }
            }
        }.execute();
    }

    public boolean MF(String u1, String u2, String dest) {
        return MF(u1, u2, dest, null);
    }

    public boolean MF(String u1, String u2, String dest, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "MF");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("dest", dest);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/MF", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/MF", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void SMAsync(String u1, String u2, String dest, String ms) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SMAsync(u1, u2, dest, ms, null);
    }

    public void SMAsync(final String u1, final String u2, final String dest, final String ms, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return SM(u1, u2, dest, ms, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SM", result);
                }
            }
        }.execute();
    }

    public boolean SM(String u1, String u2, String dest, String ms) {
        return SM(u1, u2, dest, ms, null);
    }

    public boolean SM(String u1, String u2, String dest, String ms, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SM");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("dest", dest);
        soapReq.addProperty("ms", ms);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SM", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SM", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void NOMAsync(String u1, String u2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        NOMAsync(u1, u2, null);
    }

    public void NOMAsync(final String u1, final String u2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Number doInBackground(Void... params) {
                return NOM(u1, u2, headers);
            }
            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("NOM", result);
                }
            }
        }.execute();
    }

    public int NOM(String u1, String u2) {
        return NOM(u1, u2, null);
    }

    public int NOM(String u1, String u2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "NOM");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/NOM", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/NOM", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void AFRAsync(String u1, String u2, String dest) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AFRAsync(u1, u2, dest, null);
    }

    public void AFRAsync(final String u1, final String u2, final String dest, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return AFR(u1, u2, dest, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("AFR", result);
                }
            }
        }.execute();
    }

    public boolean AFR(String u1, String u2, String dest) {
        return AFR(u1, u2, dest, null);
    }

    public boolean AFR(String u1, String u2, String dest, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "AFR");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("dest", dest);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/AFR", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/AFR", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void LINGMAsync(String u1, String u2, String club) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        LINGMAsync(u1, u2, club, null);
    }

    public void LINGMAsync(final String u1, final String u2, final String club, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected String doInBackground(Void... params) {
                return LINGM(u1, u2, club, headers);
            }
            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("LINGM", result);
                }
            }
        }.execute();
    }

    public String LINGM(String u1, String u2, String club) {
        return LINGM(u1, u2, club, null);
    }

    public String LINGM(String u1, String u2, String club, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "LINGM");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("Club", club);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/LINGM", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/LINGM", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void MFSAsync(String u1, String u2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        MFSAsync(u1, u2, null);
    }

    public void MFSAsync(final String u1, final String u2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected String doInBackground(Void... params) {
                return MFS(u1, u2, headers);
            }
            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("MFS", result);
                }
            }
        }.execute();
    }

    public String MFS(String u1, String u2) {
        return MFS(u1, u2, null);
    }

    public String MFS(String u1, String u2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "MFS");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/MFS", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/MFS", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GMAsync(String club) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GMAsync(club, null);
    }

    public void GMAsync(final String club, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorLoggedInMemberInfos>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected VectorLoggedInMemberInfos doInBackground(Void... params) {
                return GM(club, headers);
            }
            @Override
            protected void onPostExecute(VectorLoggedInMemberInfos result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GM", result);
                }
            }
        }.execute();
    }

    public VectorLoggedInMemberInfos GM(String club) {
        return GM(club, null);
    }

    public VectorLoggedInMemberInfos GM(String club, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GM");
        soapReq.addProperty("club", club);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GM", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GM", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorLoggedInMemberInfos resultVariable = new VectorLoggedInMemberInfos(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void ISUAPAsync(String id) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ISUAPAsync(id, null);
    }

    public void ISUAPAsync(final String id, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return ISUAP(id, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("ISUAP", result);
                }
            }
        }.execute();
    }

    public boolean ISUAP(String id) {
        return ISUAP(id, null);
    }

    public boolean ISUAP(String id, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "ISUAP");
        soapReq.addProperty("id", id);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/ISUAP", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/ISUAP", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void MPAvAsync(String source) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        MPAvAsync(source, null);
    }

    public void MPAvAsync(final String source, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return MPAv(source, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("MPAv", result);
                }
            }
        }.execute();
    }

    public boolean MPAv(String source) {
        return MPAv(source, null);
    }

    public boolean MPAv(String source, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "MPAv");
        soapReq.addProperty("source", source);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/MPAv", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/MPAv", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void GUREGINFAsync(String u1, String u2, String memID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GUREGINFAsync(u1, u2, memID, null);
    }

    public void GUREGINFAsync(final String u1, final String u2, final String memID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, MemberProfile>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected MemberProfile doInBackground(Void... params) {
                return GUREGINF(u1, u2, memID, headers);
            }
            @Override
            protected void onPostExecute(MemberProfile result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GUREGINF", result);
                }
            }
        }.execute();
    }

    public MemberProfile GUREGINF(String u1, String u2, String memID) {
        return GUREGINF(u1, u2, memID, null);
    }

    public MemberProfile GUREGINF(String u1, String u2, String memID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GUREGINF");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("MemID", memID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GUREGINF", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GUREGINF", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    MemberProfile resultVariable = new MemberProfile(j);
                    return resultVariable;
                    
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void SCREREQPROCESSEDAsync(String u1, String u2, String memIntNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SCREREQPROCESSEDAsync(u1, u2, memIntNo, null);
    }

    public void SCREREQPROCESSEDAsync(final String u1, final String u2, final String memIntNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected String doInBackground(Void... params) {
                return SCREREQPROCESSED(u1, u2, memIntNo, headers);
            }
            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SCREREQPROCESSED", result);
                }
            }
        }.execute();
    }

    public String SCREREQPROCESSED(String u1, String u2, String memIntNo) {
        return SCREREQPROCESSED(u1, u2, memIntNo, null);
    }

    public String SCREREQPROCESSED(String u1, String u2, String memIntNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SCREREQPROCESSED");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("MemIntNo", memIntNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SCREREQPROCESSED", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SCREREQPROCESSED", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GCREREQSLSTAsync(String u1, String u2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GCREREQSLSTAsync(u1, u2, null);
    }

    public void GCREREQSLSTAsync(final String u1, final String u2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, CredentialsRequestsListResponse>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected CredentialsRequestsListResponse doInBackground(Void... params) {
                return GCREREQSLST(u1, u2, headers);
            }
            @Override
            protected void onPostExecute(CredentialsRequestsListResponse result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GCREREQSLST", result);
                }
            }
        }.execute();
    }

    public CredentialsRequestsListResponse GCREREQSLST(String u1, String u2) {
        return GCREREQSLST(u1, u2, null);
    }

    public CredentialsRequestsListResponse GCREREQSLST(String u1, String u2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GCREREQSLST");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GCREREQSLST", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GCREREQSLST", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    CredentialsRequestsListResponse resultVariable = new CredentialsRequestsListResponse(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GUCREToADMAsync(String mIntNum) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GUCREToADMAsync(mIntNum, null);
    }

    public void GUCREToADMAsync(final String mIntNum, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected String doInBackground(Void... params) {
                return GUCREToADM(mIntNum, headers);
            }
            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GUCREToADM", result);
                }
            }
        }.execute();
    }

    public String GUCREToADM(String mIntNum) {
        return GUCREToADM(mIntNum, null);
    }

    public String GUCREToADM(String mIntNum, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GUCREToADM");
        soapReq.addProperty("mIntNum", mIntNum);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GUCREToADM", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GUCREToADM", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void MRGDRSPNSAsync(String u1, String u2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        MRGDRSPNSAsync(u1, u2, null);
    }

    public void MRGDRSPNSAsync(final String u1, final String u2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, MergedResponse>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected MergedResponse doInBackground(Void... params) {
                return MRGDRSPNS(u1, u2, headers);
            }
            @Override
            protected void onPostExecute(MergedResponse result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("MRGDRSPNS", result);
                }
            }
        }.execute();
    }

    public MergedResponse MRGDRSPNS(String u1, String u2) {
        return MRGDRSPNS(u1, u2, null);
    }

    public MergedResponse MRGDRSPNS(String u1, String u2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "MRGDRSPNS");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/MRGDRSPNS", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/MRGDRSPNS", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    MergedResponse resultVariable = new MergedResponse(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void ALCLBAsync(String dist) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ALCLBAsync(dist, null);
    }

    public void ALCLBAsync(final String dist, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorClub>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected VectorClub doInBackground(Void... params) {
                return ALCLB(dist, headers);
            }
            @Override
            protected void onPostExecute(VectorClub result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("ALCLB", result);
                }
            }
        }.execute();
    }

    public VectorClub ALCLB(String dist) {
        return ALCLB(dist, null);
    }

    public VectorClub ALCLB(String dist, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "ALCLB");
        soapReq.addProperty("dist", dist);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/ALCLB", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/ALCLB", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorClub resultVariable = new VectorClub(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void ALDTAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ALDTAsync(null);
    }

    public void ALDTAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, VectorCDist>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected VectorCDist doInBackground(Void... params) {
                return ALDT(headers);
            }
            @Override
            protected void onPostExecute(VectorCDist result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("ALDT", result);
                }
            }
        }.execute();
    }

    public VectorCDist ALDT() {
        return ALDT(null);
    }

    public VectorCDist ALDT(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "ALDT");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/ALDT", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/ALDT", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorCDist resultVariable = new VectorCDist(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void RTAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        RTAsync(null);
    }

    public void RTAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Void>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Void doInBackground(Void... params) {
                RT(headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("RT", result);
                }
            }
        }.execute();
    }

    public void RT() {
        RT(null);
    }

    public void RT(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "RT");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/RT", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/RT", soapEnvelope);
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }

    public void CRTAENQAsync(String u1, String u2, String recordID, String productID, Enquiry data) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CRTAENQAsync(u1, u2, recordID, productID, data, null);
    }

    public void CRTAENQAsync(final String u1, final String u2, final String recordID, final String productID, final Enquiry data, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return CRTAENQ(u1, u2, recordID, productID, data, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("CRTAENQ", result);
                }
            }
        }.execute();
    }

    public boolean CRTAENQ(String u1, String u2, String recordID, String productID, Enquiry data) {
        return CRTAENQ(u1, u2, recordID, productID, data, null);
    }

    public boolean CRTAENQ(String u1, String u2, String recordID, String productID, Enquiry data, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "CRTAENQ");
        soapEnvelope.addMapping("http://tempuri.org/", "data", new Enquiry().getClass());
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapReq.addProperty("ProductID", productID);
        soapReq.addProperty("data", data);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/CRTAENQ", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/CRTAENQ", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void DELAENQAsync(String enquyiryID, String u1, String u2) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DELAENQAsync(enquyiryID, u1, u2, null);
    }

    public void DELAENQAsync(final String enquyiryID, final String u1, final String u2, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return DELAENQ(enquyiryID, u1, u2, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DELAENQ", result);
                }
            }
        }.execute();
    }

    public boolean DELAENQ(String enquyiryID, String u1, String u2) {
        return DELAENQ(enquyiryID, u1, u2, null);
    }

    public boolean DELAENQ(String enquyiryID, String u1, String u2, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "DELAENQ");
        soapReq.addProperty("enquyiryID", enquyiryID);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/DELAENQ", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/DELAENQ", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void CRTNPRDAsync(String u1, String u2, String recordID, String subCatid, Product productInfo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CRTNPRDAsync(u1, u2, recordID, subCatid, productInfo, null);
    }

    public void CRTNPRDAsync(final String u1, final String u2, final String recordID, final String subCatid, final Product productInfo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return CRTNPRD(u1, u2, recordID, subCatid, productInfo, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("CRTNPRD", result);
                }
            }
        }.execute();
    }

    public boolean CRTNPRD(String u1, String u2, String recordID, String subCatid, Product productInfo) {
        return CRTNPRD(u1, u2, recordID, subCatid, productInfo, null);
    }

    public boolean CRTNPRD(String u1, String u2, String recordID, String subCatid, Product productInfo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "CRTNPRD");
        soapEnvelope.addMapping("http://tempuri.org/", "productInfo", new Product().getClass());
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapReq.addProperty("SubCatid", subCatid);
        soapReq.addProperty("productInfo", productInfo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/CRTNPRD", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/CRTNPRD", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void DELVIDURLAsync(String u1, String u2, String videoID, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DELVIDURLAsync(u1, u2, videoID, recordID, null);
    }

    public void DELVIDURLAsync(final String u1, final String u2, final String videoID, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return DELVIDURL(u1, u2, videoID, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DELVIDURL", result);
                }
            }
        }.execute();
    }

    public boolean DELVIDURL(String u1, String u2, String videoID, String recordID) {
        return DELVIDURL(u1, u2, videoID, recordID, null);
    }

    public boolean DELVIDURL(String u1, String u2, String videoID, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "DELVIDURL");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("videoID", videoID);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/DELVIDURL", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/DELVIDURL", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void ADDNWVIDULAsync(String title, String uRL, String u1, String u2, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ADDNWVIDULAsync(title, uRL, u1, u2, recordID, null);
    }

    public void ADDNWVIDULAsync(final String title, final String uRL, final String u1, final String u2, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return ADDNWVIDUL(title, uRL, u1, u2, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("ADDNWVIDUL", result);
                }
            }
        }.execute();
    }

    public boolean ADDNWVIDUL(String title, String uRL, String u1, String u2, String recordID) {
        return ADDNWVIDUL(title, uRL, u1, u2, recordID, null);
    }

    public boolean ADDNWVIDUL(String title, String uRL, String u1, String u2, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "ADDNWVIDUL");
        soapReq.addProperty("Title", title);
        soapReq.addProperty("URL", uRL);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/ADDNWVIDUL", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/ADDNWVIDUL", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void UPDGALIMGTTLAsync(String title, String galImgid, String u1, String u2, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UPDGALIMGTTLAsync(title, galImgid, u1, u2, recordID, null);
    }

    public void UPDGALIMGTTLAsync(final String title, final String galImgid, final String u1, final String u2, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return UPDGALIMGTTL(title, galImgid, u1, u2, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UPDGALIMGTTL", result);
                }
            }
        }.execute();
    }

    public boolean UPDGALIMGTTL(String title, String galImgid, String u1, String u2, String recordID) {
        return UPDGALIMGTTL(title, galImgid, u1, u2, recordID, null);
    }

    public boolean UPDGALIMGTTL(String title, String galImgid, String u1, String u2, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UPDGALIMGTTL");
        soapReq.addProperty("Title", title);
        soapReq.addProperty("GalImgid", galImgid);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UPDGALIMGTTL", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UPDGALIMGTTL", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void UPDGALVIDTTLAsync(String title, String vidid, String u1, String u2, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UPDGALVIDTTLAsync(title, vidid, u1, u2, recordID, null);
    }

    public void UPDGALVIDTTLAsync(final String title, final String vidid, final String u1, final String u2, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return UPDGALVIDTTL(title, vidid, u1, u2, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UPDGALVIDTTL", result);
                }
            }
        }.execute();
    }

    public boolean UPDGALVIDTTL(String title, String vidid, String u1, String u2, String recordID) {
        return UPDGALVIDTTL(title, vidid, u1, u2, recordID, null);
    }

    public boolean UPDGALVIDTTL(String title, String vidid, String u1, String u2, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UPDGALVIDTTL");
        soapReq.addProperty("Title", title);
        soapReq.addProperty("vidid", vidid);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UPDGALVIDTTL", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UPDGALVIDTTL", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void MEnshHOARAsync(String u1, String u2, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        MEnshHOARAsync(u1, u2, recordID, null);
    }

    public void MEnshHOARAsync(final String u1, final String u2, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, ESheet>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected ESheet doInBackground(Void... params) {
                return MEnshHOAR(u1, u2, recordID, headers);
            }
            @Override
            protected void onPostExecute(ESheet result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("MEnshHOAR", result);
                }
            }
        }.execute();
    }

    public ESheet MEnshHOAR(String u1, String u2, String recordID) {
        return MEnshHOAR(u1, u2, recordID, null);
    }

    public ESheet MEnshHOAR(String u1, String u2, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "MEnshHOAR");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/MEnshHOAR", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/MEnshHOAR", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    ESheet resultVariable = new ESheet(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void DelGalImgAsync(String imageID, String u1, String u2, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DelGalImgAsync(imageID, u1, u2, recordID, null);
    }

    public void DelGalImgAsync(final String imageID, final String u1, final String u2, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return DelGalImg(imageID, u1, u2, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DelGalImg", result);
                }
            }
        }.execute();
    }

    public boolean DelGalImg(String imageID, String u1, String u2, String recordID) {
        return DelGalImg(imageID, u1, u2, recordID, null);
    }

    public boolean DelGalImg(String imageID, String u1, String u2, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "DelGalImg");
        soapReq.addProperty("ImageID", imageID);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/DelGalImg", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/DelGalImg", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void DLPRDAsync(String u1, String u2, String productID, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DLPRDAsync(u1, u2, productID, recordID, null);
    }

    public void DLPRDAsync(final String u1, final String u2, final String productID, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return DLPRD(u1, u2, productID, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DLPRD", result);
                }
            }
        }.execute();
    }

    public boolean DLPRD(String u1, String u2, String productID, String recordID) {
        return DLPRD(u1, u2, productID, recordID, null);
    }

    public boolean DLPRD(String u1, String u2, String productID, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "DLPRD");
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("ProductID", productID);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/DLPRD", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/DLPRD", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void ADNGLIMGAsync(String title, VectorByte image, String u1, String u2, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ADNGLIMGAsync(title, image, u1, u2, recordID, null);
    }

    public void ADNGLIMGAsync(final String title, final VectorByte image, final String u1, final String u2, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return ADNGLIMG(title, image, u1, u2, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("ADNGLIMG", result);
                }
            }
        }.execute();
    }

    public boolean ADNGLIMG(String title, VectorByte image, String u1, String u2, String recordID) {
        return ADNGLIMG(title, image, u1, u2, recordID, null);
    }

    public boolean ADNGLIMG(String title, VectorByte image, String u1, String u2, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "ADNGLIMG");
        soapReq.addProperty("Title", title);
        soapReq.addProperty("image", image.toString());
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/ADNGLIMG", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/ADNGLIMG", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void UPDPRDIMGAsync(VectorByte image, String u1, String u2, String productID, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UPDPRDIMGAsync(image, u1, u2, productID, recordID, null);
    }

    public void UPDPRDIMGAsync(final VectorByte image, final String u1, final String u2, final String productID, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return UPDPRDIMG(image, u1, u2, productID, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UPDPRDIMG", result);
                }
            }
        }.execute();
    }

    public boolean UPDPRDIMG(VectorByte image, String u1, String u2, String productID, String recordID) {
        return UPDPRDIMG(image, u1, u2, productID, recordID, null);
    }

    public boolean UPDPRDIMG(VectorByte image, String u1, String u2, String productID, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UPDPRDIMG");
        soapReq.addProperty("image", image.toString());
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("ProductID", productID);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UPDPRDIMG", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UPDPRDIMG", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void UPPRODVidULAsync(String url, String u1, String u2, String productID, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UPPRODVidULAsync(url, u1, u2, productID, recordID, null);
    }

    public void UPPRODVidULAsync(final String url, final String u1, final String u2, final String productID, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return UPPRODVidUL(url, u1, u2, productID, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UPPRODVidUL", result);
                }
            }
        }.execute();
    }

    public boolean UPPRODVidUL(String url, String u1, String u2, String productID, String recordID) {
        return UPPRODVidUL(url, u1, u2, productID, recordID, null);
    }

    public boolean UPPRODVidUL(String url, String u1, String u2, String productID, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UPPRODVidUL");
        soapReq.addProperty("url", url);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("ProductID", productID);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UPPRODVidUL", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UPPRODVidUL", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void UPPRODPRICAsync(String price, String u1, String u2, String productID, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UPPRODPRICAsync(price, u1, u2, productID, recordID, null);
    }

    public void UPPRODPRICAsync(final String price, final String u1, final String u2, final String productID, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return UPPRODPRIC(price, u1, u2, productID, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UPPRODPRIC", result);
                }
            }
        }.execute();
    }

    public boolean UPPRODPRIC(String price, String u1, String u2, String productID, String recordID) {
        return UPPRODPRIC(price, u1, u2, productID, recordID, null);
    }

    public boolean UPPRODPRIC(String price, String u1, String u2, String productID, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UPPRODPRIC");
        soapReq.addProperty("Price", price);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("ProductID", productID);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UPPRODPRIC", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UPPRODPRIC", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void UPPRODDESCAsync(String description, String u1, String u2, String productID, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UPPRODDESCAsync(description, u1, u2, productID, recordID, null);
    }

    public void UPPRODDESCAsync(final String description, final String u1, final String u2, final String productID, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return UPPRODDESC(description, u1, u2, productID, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UPPRODDESC", result);
                }
            }
        }.execute();
    }

    public boolean UPPRODDESC(String description, String u1, String u2, String productID, String recordID) {
        return UPPRODDESC(description, u1, u2, productID, recordID, null);
    }

    public boolean UPPRODDESC(String description, String u1, String u2, String productID, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UPPRODDESC");
        soapReq.addProperty("Description", description);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("ProductID", productID);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UPPRODDESC", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UPPRODDESC", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void UPPRODTTLAsync(String title, String u1, String u2, String productID, String recordID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UPPRODTTLAsync(title, u1, u2, productID, recordID, null);
    }

    public void UPPRODTTLAsync(final String title, final String u1, final String u2, final String productID, final String recordID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return UPPRODTTL(title, u1, u2, productID, recordID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UPPRODTTL", result);
                }
            }
        }.execute();
    }

    public boolean UPPRODTTL(String title, String u1, String u2, String productID, String recordID) {
        return UPPRODTTL(title, u1, u2, productID, recordID, null);
    }

    public boolean UPPRODTTL(String title, String u1, String u2, String productID, String recordID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UPPRODTTL");
        soapReq.addProperty("Title", title);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("ProductID", productID);
        soapReq.addProperty("RecordID", recordID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UPPRODTTL", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UPPRODTTL", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void UPSBCTAsync(String title, String subCatid, String u1, String u2, String recID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UPSBCTAsync(title, subCatid, u1, u2, recID, null);
    }

    public void UPSBCTAsync(final String title, final String subCatid, final String u1, final String u2, final String recID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return UPSBCT(title, subCatid, u1, u2, recID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UPSBCT", result);
                }
            }
        }.execute();
    }

    public boolean UPSBCT(String title, String subCatid, String u1, String u2, String recID) {
        return UPSBCT(title, subCatid, u1, u2, recID, null);
    }

    public boolean UPSBCT(String title, String subCatid, String u1, String u2, String recID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UPSBCT");
        soapReq.addProperty("Title", title);
        soapReq.addProperty("SubCatid", subCatid);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecID", recID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UPSBCT", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UPSBCT", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void DLPSBCTAsync(String sbCatid, String u1, String u2, String recID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DLPSBCTAsync(sbCatid, u1, u2, recID, null);
    }

    public void DLPSBCTAsync(final String sbCatid, final String u1, final String u2, final String recID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return DLPSBCT(sbCatid, u1, u2, recID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DLPSBCT", result);
                }
            }
        }.execute();
    }

    public boolean DLPSBCT(String sbCatid, String u1, String u2, String recID) {
        return DLPSBCT(sbCatid, u1, u2, recID, null);
    }

    public boolean DLPSBCT(String sbCatid, String u1, String u2, String recID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "DLPSBCT");
        soapReq.addProperty("SbCatid", sbCatid);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecID", recID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/DLPSBCT", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/DLPSBCT", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void CNPSBCATAsync(String title, String u1, String u2, String recID) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CNPSBCATAsync(title, u1, u2, recID, null);
    }

    public void CNPSBCATAsync(final String title, final String u1, final String u2, final String recID, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;
            @Override
            protected Boolean doInBackground(Void... params) {
                return CNPSBCAT(title, u1, u2, recID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("CNPSBCAT", result);
                }
            }
        }.execute();
    }

    public boolean CNPSBCAT(String title, String u1, String u2, String recID) {
        return CNPSBCAT(title, u1, u2, recID, null);
    }

    public boolean CNPSBCAT(String title, String u1, String u2, String recID, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "CNPSBCAT");
        soapReq.addProperty("Title", title);
        soapReq.addProperty("u1", u1);
        soapReq.addProperty("u2", u2);
        soapReq.addProperty("RecID", recID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/CNPSBCAT", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/CNPSBCAT", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }


}
